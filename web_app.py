# -*- coding: utf-8 -*-
"""web_app.ipynb

Automatically generated by Colab.

"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans

# Configure the page
st.set_page_config(page_title="Supply Chain Data Analysis", layout="wide")

# Function to load data
@st.cache
def load_data(file):
    data = pd.read_csv(file)
    return data

# Sidebar for file upload
st.sidebar.title("Upload Dataset")
uploaded_file = st.sidebar.file_uploader("Upload a CSV file", type="csv")

if uploaded_file:
    # Load the dataset
    data = load_data(uploaded_file).copy()
    st.title("Supply Chain Data Analysis")
    st.write("### Uploaded Dataset Preview")
    st.write(data.head())

    # Data Cleaning
    st.header("Data Cleaning")
    st.write(f"Initial data shape: {data.shape}")
    data.dropna(inplace=True)
    st.write(f"Data shape after dropping missing values: {data.shape}")

    # Exploratory Data Analysis (EDA)
    st.header("Exploratory Data Analysis (EDA)")
    numeric_columns = data.select_dtypes(include=["float64", "int64"]).columns.tolist()

    if numeric_columns:
        feature = st.selectbox("Select a Feature for Visualization", options=numeric_columns)
        if feature:
            fig, ax = plt.subplots()
            sns.histplot(data[feature], kde=True, ax=ax)
            st.pyplot(fig)

        # Correlation Heatmap
        if st.checkbox("Show Correlation Heatmap"):
            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(data.corr(), annot=True, cmap="coolwarm", ax=ax)
            st.pyplot(fig)
    else:
        st.write("No numeric columns available for visualization.")

    # Machine Learning Section
    st.header("Machine Learning")

    model_choice = st.selectbox("Choose a Machine Learning Model", ["Linear Regression", "K-Means Clustering"])

    if model_choice == "Linear Regression" and numeric_columns:
        target = st.selectbox("Select Target Variable", options=numeric_columns)
        features = st.multiselect("Select Feature Variables", options=numeric_columns)

        if target and features:
            X = data[features]
            y = data[target]

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            model = LinearRegression()
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            st.write("### Model Results")
            st.write("Model Coefficients:", model.coef_)
            st.write("Intercept:", model.intercept_)
            st.write("RÂ² Score:", model.score(X_test, y_test))

            # Visualization
            fig, ax = plt.subplots()
            ax.scatter(y_test, y_pred)
            ax.set_xlabel("Actual")
            ax.set_ylabel("Predicted")
            ax.set_title("Linear Regression Results")
            st.pyplot(fig)

    elif model_choice == "K-Means Clustering" and numeric_columns:
        features = st.multiselect("Select Features for Clustering", options=numeric_columns)
        if features and len(features) >= 2:
            X = data[features]
            kmeans = KMeans(n_clusters=3, random_state=42)
            data["Cluster"] = kmeans.fit_predict(X)

            st.write("### Cluster Results")
            st.write("Cluster Centers:")
            st.write(kmeans.cluster_centers_)

            # Visualization
            fig, ax = plt.subplots()
            scatter = ax.scatter(data[features[0]], data[features[1]], c=data["Cluster"], cmap="viridis")
            ax.set_xlabel(features[0])
            ax.set_ylabel(features[1])
            ax.set_title("K-Means Clustering")
            st.pyplot(fig)
        else:
            st.write("Select at least two features for clustering.")

else:
    st.title("Supply Chain Data Analysis")
    st.write("### Instructions")
    st.write("Upload a dataset in CSV format to begin.")
